1. Crie um programa em C que cria um processo-filho e um pipe de comunicação. Faça com que o processo-pai envie os valores 1, 2, 3, 4, 5, 6, 7, 8, 9 e 10 para o processo-filho, com intervalos de 1 segundo entre cada envio. Depois de o processo-pai enviar o número 10, ele aguarda 1 segundo e termina a execução. O processo-filho escreve na tela cada valor recebido, e quando ele receber o valor 10, ele termina a execução.
#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <signal.h>


int main()
{
    pid_t pid_filho;
    int fd[2];
    
    pipe(fd);
    pid_filho = fork();

    // Codigo do filho    
    if(pid_filho == 0)
    {
        int buf_filho,i;
        printf("Filho vai ler o pipe\n");
        
        for(i=0;i<10;i++)
        {
            if(read(fd[0], &buf_filho, sizeof(int)) < 0) 
            {
                printf("Erro na leitura do pipe\n");
            }
            else
            {
                printf("Valor lido pelo filho = %d\n", buf_filho);
            }
            sleep(1); 
        }

        printf("Filho terminando sua execução\n");



    }
    
    // Codigo do pai
    else
    {
        int buf_pai,i;

        for(i=0;i<10;i++)
        {
           buf_pai = i+1;
           if (write(fd[1], &buf_pai, sizeof(buf_pai)) < 0)
           {
                printf("Erro na escrita do pipe\n");
           }
           sleep(1); 
        }
        printf("Pai terminando sua execução\n");
      
    }
    return 0;
}
2. Crie um programa em C que cria um processo-filho e um pipe de comunicação. Utilize o pipe para executar a seguinte conversa entre processos:

	FILHO: Pai, qual é a verdadeira essência da sabedoria?
	PAI: Não façais nada violento, praticai somente aquilo que é justo e equilibrado.
	FILHO: Mas até uma criança de três anos sabe disso!
	PAI: Sim, mas é uma coisa difícil de ser praticada até mesmo por um velho como eu...

Neste exercício, quem recebe a mensagem via pipe é quem as escreve no terminal.

#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <signal.h>


int main()
{
    pid_t pid_filho;
    int fd[2];
    
    pipe(fd);
    pid_filho = fork();

    // Codigo do filho    
    if(pid_filho == 0)
    {
        
        char buf_filho[100];

        //sleep(1);

        strcpy(buf_filho,"Pai, qual é a verdadeira essência da sabedoria?");

        if (write(fd[1], buf_filho, sizeof(buf_filho)) < 0)
        {
            printf("Erro na escrita do pipe\n");
        }

        sleep(1); 

        if(read(fd[0], buf_filho, 100) < 0) 
        {
            printf("Erro na leitura do pipe\n");
        }
        else
        {
            printf("Pai = %s\n", buf_filho);
        }

        strcpy(buf_filho,"Mas até uma criança de três anos sabe disso!");

        if (write(fd[1], buf_filho, sizeof(buf_filho)) < 0)
        {
            printf("Erro na escrita do pipe\n");
        }

        sleep(1);

        if(read(fd[0], buf_filho, 100) < 0) 
        {
            printf("Erro na leitura do pipe\n");
        }
        else
        {
            printf("Pai = %s\n", buf_filho);
        }


    }
    
    // Codigo do pai
    else
    {
        char buf_pai[100];


        if(read(fd[0], buf_pai, 100) < 0) 
        {
            printf("Erro na leitura do pipe\n");
        }
        else
        {
            printf("Filho = %s\n", buf_pai);
        }

        strcpy(buf_pai,"Não façais nada violento, praticai somente aquilo que é justo e equilibrado.");

        if (write(fd[1], buf_pai, sizeof(buf_pai)) < 0)
        {
            printf("Erro na escrita do pipe\n");
        }

        sleep(2); 

        if(read(fd[0], buf_pai, 100) < 0) 
        {
            printf("Erro na leitura do pipe\n");
        }
        else
        {
            printf("Filho = %s\n", buf_pai);
        }

        strcpy(buf_pai,"Sim, mas é uma coisa difícil de ser praticada até mesmo por um velho como eu...");

        if (write(fd[1], buf_pai, sizeof(buf_pai)) < 0)
        {
            printf("Erro na escrita do pipe\n");
        }

    }
    sleep(2);
    return 0;
}

3. Crie um programa em C que cria dois processos-filhos e um pipe de comunicação. Utilize o pipe para executar a seguinte conversa entre processos:

	FILHO1: Quando o vento passa, é a bandeira que se move.
	FILHO2: Não, é o vento que se move.
	PAI: Os dois se enganam. É a mente dos senhores que se move.


Neste exercício, quem recebe a mensagem via pipe é quem as escreve no terminal.

#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <signal.h>


int main()
{
    pid_t pid_filho_1;
    pid_t pid_filho_2;
    int fd[2];
    
    pipe(fd);
    
    pid_filho_1 = fork();

    // Codigo do filho 1  
    if(pid_filho_1 == 0)
    {
        
        char buf_filho[100];

        strcpy(buf_filho,"Quando o vento passa, é a bandeira que se move.");

        if (write(fd[1], buf_filho, sizeof(buf_filho)) < 0)
        {
            printf("Erro na escrita do pipe\n");
        }
        sleep(2); 

        if(read(fd[0], buf_filho, 100) < 0) 
        {
            printf("Erro na leitura do pipe\n");
        }
        else
        {
            printf("Pai = %s\n", buf_filho);
        }

    }
    
    else
    {
        pid_filho_2 = fork();

        // Codigo do filho 2

        if(pid_filho_2 == 0){

            char buf_filho[100];

            if(read(fd[0], buf_filho, 100) < 0)
            {
                printf("Erro na leitura do pipe\n");
            }
            else
            {
                printf("Filho1 = %s\n", buf_filho);
            }

            strcpy(buf_filho,"Não, é o vento que se move.");

            if (write(fd[1], buf_filho, sizeof(buf_filho)) < 0){
                printf("Erro na escrita do pipe\n");
            }

        }

        // Codigo do pai

        else{
            sleep(1);
            char buf_pai[100];

            if(read(fd[0], buf_pai, 100) < 0) 
            {
                printf("Erro na leitura do pipe\n");
            }
            else
            {
                printf("Filho2 = %s\n", buf_pai);
            }

            strcpy(buf_pai,"Os dois se enganam. É a mente dos senhores que se move.");

            if (write(fd[1], buf_pai, sizeof(buf_pai)) < 0)
            {
                printf("Erro na escrita do pipe\n");
            }
        }
    sleep(1);
        
    }
    return 0;
}

4. Crie um programa em C que cria um processo-filho e um pipe de comunicação. O processo-filho deverá pedir o nome do usuário, envia-lo para o pai via pipe, e o pai deverá escrever o nome do usuário no terminal.
#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <signal.h>


int main()
{
    pid_t pid_filho;
    int fd[2];
    char nome[50];
    char nome2[50];
    
    pipe(fd);
    pid_filho = fork();

    // Codigo do filho    
    if(pid_filho == 0)
    {
        
        printf("Digite seu nome: ");
        scanf("%s",nome);

        if(write(fd[1],nome,sizeof(nome))<0)
        {
            printf("Erro na escrita\n");
        }
    }
    
    // Codigo do pai
    else
    {
        if(read(fd[0],nome2,50)<0)
        {
            printf("Erro na leitura\n");
        }
        else
        {
            printf("O nome difitado foi: %s\n",nome2);
        }
    }
    return 0;
}


5. Utilize o sinal de alarme para chamar a cada segundo o comando 'ps' ordenando todos os processos de acordo com o uso da CPU. Ou seja, seu código atualizará a lista de processos a cada segundo. Além disso, o código deverá tratar o sinal do CTRL-C, escrevendo "Processo terminado!" na tela antes de terminar a execução do processo.

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <unistd.h>

void cntrl_c()
{
	printf("Processo Terminado!\n");
	exit(1);
}

void contagem()
{
	system("ps");
	alarm(1);
}

int main()
{
	signal(SIGINT,cntrl_c);
	signal(SIGALRM, contagem);
	printf("Pressione CTRL-C para fechar o programa.\n");
	alarm(1);
	while(1);	
	return 0;
}
