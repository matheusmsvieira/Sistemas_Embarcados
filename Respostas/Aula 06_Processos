1. Crie um código em C para gerar três processos-filho usando o fork().
#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>

int main(int argc, char **argv){
    pid_t child_pid_1;
    pid_t child_pid_2;
    pid_t child_pid_3;
    
    printf("numero do processo original: %d\n", (int) getpid()); 

    child_pid_1 = fork();
    
    if(child_pid_1 == 0)
    {
      printf("filho_1 %d\n", (int) getpid()); 
      
    }

    else
    {
      child_pid_2 = fork();
      if(child_pid_2 == 0)
      {
        printf("filho_2 %d\n", (int) getpid());      
      }

      else
      {
        child_pid_3 = fork();
        if(child_pid_3 == 0)
        {
          printf("filho_3 %d\n", (int) getpid());      
        }
        else
        {
          printf("pai %d\n", (int) getpid());    
        }    
      }
    }
    return 0;
}


2. Crie um código em C que recebe o nome de diversos comandos pelos argumentos de entrada (argc e *argv[]), e executa cada um sequencialmente usando system(). Por exemplo, considerando que o código criado recebeu o nome de 'serial_system', e que ele foi executado na pasta '/Sistemas_Embarcados/Code/Aula_06', que contem diversos arquivos:
	$ ./serial_system pwd echo ls echo cal
	$ ~/Sistemas_Embarcados/Code/Aula_06
	$
	$ Ex1.c    Ex2b.c   Ex4.c   Ex6.c
	$ Ex2a.c   Ex3.c    Ex5.c   serial_system
	$
	$     Março 2017
	$ Do Se Te Qu Qu Se Sá
	$           1  2  3  4
	$  5  6  7  8  9 10 11
	$ 12 13 14 15 16 17 18
	$ 19 20 21 22 23 24 25
	$ 26 27 28 29 30 31
	$
#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>

int main(int argc, char **argv)
{

    char *argumentos;
    int i;

    for(i=1;i<=argc;i++)
    {  
      argumentos = argv[i];
      system(argumentos);
    
    }
    return 0;
}

3. Crie um código em C que recebe o nome de diversos comandos pelos argumentos de entrada (argc e *argv[]), e executa cada um usando fork() e exec().
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>

//NÃO CONCLUIDO!!!

int main(int argc,char **argv)
{
    char argumentos[100];
    pid_t filho = fork();
    int i;

    for(i=1;i<=argc;i++)
    {
        sprintf(argumentos[i],"\"%s\"",argv[i]);
        //printf("%s\n", argumentos[i]);
    }

    if(filho == 0){
        printf("Filho\n");
        execvp(argumentos[2],argumentos);
    }

    else{
        printf("Pai\n");
    }
    return 0;
}

4. Crie um código em C que gera três processos-filho usando o fork(), e que cada processo-filho chama a seguinte função uma vez:

	int v_global = 0; // Variavel global para este exemplo
	void Incrementa_Variavel_Global(pid_t id_atual)
	{
		v_global++;
		printf("ID do processo que executou esta funcao = %d\n", id_atual);
		printf("v_global = %d\n", v_global);
	}

(Repare que a função Incrementa_Variavel_Global() recebe como entrada o ID do processo que a chamou.)
Responda: a variável global 'v_global' foi compartilhada por todos os processos-filho, ou cada processo enxergou um valor diferente para esta variável?
 #include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>

int v_global = 0; // Variavel global para este exemplo
	void Incrementa_Variavel_Global(pid_t id_atual)
	{
		v_global++;
		printf("ID do processo que executou esta funcao = %d\n", id_atual);
		printf("v_global = %d\n", v_global);
	}


int main(int argc, char const *argv[])
{
	pid_t child_pid_1;
	pid_t child_pid_2;
	pid_t child_pid_3;
	printf("%d\n",(int) getpid() );

	 child_pid_1 = fork();
	if (child_pid_1==0)
	{
		printf("filho1\n");
		Incrementa_Variavel_Global(getpid());
	}
	else
	{
		child_pid_2 = fork();
		if (child_pid_2==0)
		{
			printf("filho2\n");
			Incrementa_Variavel_Global(getpid());
		}
		else
		{
			child_pid_3 = fork();
			if (child_pid_3==0)
			{
				printf("filho3\n");
				Incrementa_Variavel_Global(getpid());
			}
			else
			{
				printf("pai\n");
				
			}
		}

		

	}
	
	
		
	return 0;
}

5. Repita a questão anterior, mas desta vez faça com que o processo-pai também chame a função Incrementa_Variavel_Global().
Responda: a variável global 'v_global' foi compartilhada por todos os processos-filho e o processo-pai, ou cada processo enxergou um valor diferente para esta variável?

R: Cada uma enxergou um valor diferente para essa variável.

#include <stdio.h>
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>

int v_global = 0; // Variavel global para este exemplo
	void Incrementa_Variavel_Global(pid_t id_atual)
	{
		v_global++;
		printf("ID do processo que executou esta funcao = %d\n", id_atual);
		printf("v_global = %d\n", v_global);
	}


int main(int argc, char const *argv[])
{
	pid_t child_pid_1;
	pid_t child_pid_2;
	pid_t child_pid_3;
	printf("%d\n",(int) getpid() );

	 child_pid_1 = fork();
	if (child_pid_1==0)
	{
		printf("filho1\n");
		Incrementa_Variavel_Global(getpid());
	}
	else
	{
		child_pid_2 = fork();
		if (child_pid_2==0)
		{
			printf("filho2\n");
			Incrementa_Variavel_Global(getpid());
		}
		else
		{
			child_pid_3 = fork();
			if (child_pid_3==0)
			{
				printf("filho3\n");
				Incrementa_Variavel_Global(getpid());
			}
			else
			{
				printf("pai\n");
				Incrementa_Variavel_Global(getpid());
			}
		}

		

	}
	
	
		
	return 0;
}
